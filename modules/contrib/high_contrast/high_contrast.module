<?php
/**
* @file
* Allows users to switch to a high contrast version of the active theme.
*/

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\high_contrast\HighContrastTrait;

/**
 * Location of the high_contrast.css file.
 */
const HIGH_CONTRAST_CSS_LOCATION = 'public://css/high_contrast.css';

/**
 * Implements hook_library_info_build().
 */
function high_contrast_library_info_build() {
  $libraries = [];

  $libraries['high_contrast'] = [
    'version' => filemtime(HIGH_CONTRAST_CSS_LOCATION),
    'css' => [
      'base' => [
        HIGH_CONTRAST_CSS_LOCATION => [],
      ],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_page_attachments().
 *
 * Attach the library to the page instead of attaching it to the form, so the
 * high contrast persists even on pages where the HighContrastSwitchForm is not
 * being displayed.
 */
function high_contrast_page_attachments(array &$attachments) {
  $attachments['#cache']['contexts'][] = 'high_contrast';
  $attachments['#cache']['tags'][] = 'config:high_contrast.settings';

  if (HighContrastTrait::high_contrast_enabled()) {
    $attachments['#attached']['library'][] = 'high_contrast/high_contrast';
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * @see high_contrast_block_view_pre_render()
 */
function high_contrast_block_view_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = 'high_contrast_block_view_pre_render';
}

/**
 * #pre_render callback: Sets high contrast cacheability metadata on blocks.
 *
 * Scans all blocks to see if they depend on the system.theme.global cache tag.
 * If so, also make them depend on the high contrast cacheability metadata.
 */
function high_contrast_block_view_pre_render(array $build) {
  $cacheable_metadata = CacheableMetadata::createFromRenderArray($build);

  // Add cacheable data for blocks depending on config:system.site cache tags.
  // Todo: The system branding block does not correctly declare its dependency on system.theme.global.
  $tags = $cacheable_metadata->getCacheTags();
  if (in_array('config:system.site', $tags)) {
    $config = \Drupal::config('high_contrast.settings');

    // Always create a cache context for the no-whitelabel version.
    $cacheable_metadata->addCacheContexts(['high_contrast']);
    $cacheable_metadata->addCacheableDependency($config);

    // Add cacheable metadata.
    $cacheable_metadata->applyTo($build);
  }

  return $build;
}

/**
 * Function for building a custom high contrast stylesheet.
 *
 * @param $background
 *   The color to use as background.
 * @param $text
 *   The color to use for texts.
 * @param $hyperlink
 *   The color to use for hyperlinks.
 *
 * @return string
 */
function _high_contrast_build_css($background, $text, $hyperlink) {
  $css = '
* {
  background-color: ' . $background . ' !important;
  background-image: none !important;
  color: ' . $text . ' !important;
  line-height: 1.5em !important;
  text-shadow: none !important;
}

a, a * {
  background-color: ' . $background . ' !important;
  color: ' . $hyperlink . ' !important;
  text-decoration: underline !important;
}

a:hover, a:hover * {
  background-color: ' . $hyperlink . ' !important;
  color: ' . $background . ' !important;
  text-decoration: none !important;
}

input {
  background-color: ' . $text . ' !important;
  color: ' . $background . ' !important;
}

input[type=submit],
input[type=button],
button {
  background-color: ' . $hyperlink . ' !important;
  color: ' . $background . ' !important;
}

input[type=submit]:hover,
input[type=button]:hover,
button:hover {
  text-decoration: underline !important;
}
  
::selection {
  background-color: cyan !important;
  color: ' . $background . ' !important;
}
';

  return $css;
}
